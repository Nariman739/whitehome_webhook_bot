
import telebot
import openai
import flask
import os

TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OWNER_ID = int(os.getenv("ADMIN_ID"))

bot = telebot.TeleBot(TOKEN)
openai.api_key = OPENAI_API_KEY
app = flask.Flask(__name__)
chat_history = {}

PROMPT_SYSTEM = "–¢—ã ‚Äî AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç White Home –≤ –ê—Å—Ç–∞–Ω–µ. –¢–µ–±—è –∑–æ–≤—É—Ç –ë–∞—É—ã—Ä–∂–∞–Ω. –ü–æ–º–æ–≥–∞–µ—à—å –∫–ª–∏–µ–Ω—Ç—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ç–æ–ª–∫–æ–≤. –í–µ–∂–ª–∏–≤–æ –æ–±—â–∞–π—Å—è, –≤–µ–¥–∏ –∫ —Ä–∞—Å—á—ë—Ç—É –∏ –∑–∞–º–µ—Ä—É. –£–≤–µ–¥–æ–º–ª—è–π –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ –∞–¥—Ä–µ—Å–∞."

@bot.message_handler(commands=['start'])
def greet(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –ë–∞—É—ã—Ä–∂–∞–Ω –∏–∑ White Home. –°–∫–æ–ª—å–∫–æ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –ø–æ—Ç–æ–ª–æ–∫?")

@bot.message_handler(func=lambda m: True)
def handle_all(message):
    user_id = message.chat.id
    user_text = message.text

    if user_id not in chat_history:
        chat_history[user_id] = [{"role": "system", "content": PROMPT_SYSTEM}]
    chat_history[user_id].append({"role": "user", "content": user_text})

    if any(x in user_text.lower() for x in ['–Ω–æ–º–µ—Ä', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–∞–¥—Ä–µ—Å', '–∞—Å—Ç–∞–Ω–∞', '—É–ª–∏—Ü–∞', '–¥–æ–º', '+7']):
        bot.send_message(OWNER_ID, f"üì¨ –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç @{message.from_user.username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}:\n\n{user_text}")

    try:
        response = openai.chat.completions.create(
            model="gpt-4",
            messages=chat_history[user_id]
        )
        reply = response.choices[0].message.content
        bot.send_message(user_id, reply)
        chat_history[user_id].append({"role": "assistant", "content": reply})
    except Exception as e:
        bot.send_message(user_id, f"–û—à–∏–±–∫–∞: {e}")

@app.route(f"/{TOKEN}", methods=['POST'])
def webhook():
    if flask.request.headers.get('content-type') == 'application/json':
        update = telebot.types.Update.de_json(flask.request.stream.read().decode("utf-8"))
        bot.process_new_updates([update])
        return '', 200
    else:
        return '–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', 403

@app.route('/', methods=['GET'])
def index():
    return "White Home Bot is running!"
