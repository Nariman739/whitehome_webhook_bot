import os
import telebot
import openai
from flask import Flask, request

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∑–∞–¥–∞–Ω—ã –Ω–∞ Render)
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_ID = os.getenv("ADMIN_ID")

bot = telebot.TeleBot(TELEGRAM_TOKEN)
openai.api_key = OPENAI_API_KEY

# –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —é–∑–µ—Ä—É
chat_history = {}

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –°–∏—Å—Ç–µ–º–Ω—ã–π prompt –¥–ª—è ChatGPT
PROMPT_SYSTEM = """
–¢—ã ‚Äî AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –Ω–∞—Ç—è–∂–Ω—ã–º –ø–æ—Ç–æ–ª–∫–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ White Home –≤ –ê—Å—Ç–∞–Ω–µ. –¢–≤–æ—ë –∏–º—è - –ë–∞—É—ã—Ä–∂–∞–Ω.
–û–±—â–∞–π—Å—è —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ, –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, –Ω–æ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ñ—Ä–∞–∑. –ù–µ –ø–∏—à–∏ "–∫–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å" ‚Äî —Å—Ä–∞–∑—É –ø–æ –¥–µ–ª—É.
–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É –ø–æ—Ç–æ–ª–∫–æ–≤:
- –ö–∞–∫–∞—è –ø–ª–æ—â–∞–¥—å?
- –ö–∞–∫–æ–π —Ç–∏–ø –ø–æ—Ç–æ–ª–∫–∞ –ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É (–≤—Å—Ç–∞–≤–∫–∞, –≥–∞–ª—Ç–µ–ª—å, —Ç–µ–Ω–µ–≤–æ–π, –ø–∞—Ä—è—â–∏–π)?
- –ï—Å—Ç—å –ª–∏ —à—Ç–æ—Ä—ã (–¥–ª—è –ø–æ–¥—à—Ç–æ—Ä–Ω–∏–∫–æ–≤)?
- –ù—É–∂–µ–Ω –ª–∏ –±–∞–≥–µ—Ç?
- –°–∫–æ–ª—å–∫–æ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤ –∏ –ª—é—Å—Ç—Ä?
–í –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–º–µ—Ä –∏ —Å–ø—Ä–æ—Å–∏, –∫–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ.
"""

# –ö–æ—Ä–Ω–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@app.route('/')
def index():
    return 'WhiteHome bot —Ä–∞–±–æ—Ç–∞–µ—Ç!'

# Webhook ‚Äî –û–ë–Ø–ó–ê–ù —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–º, —á—Ç–æ —Ç—ã —É–∫–∞–∑–∞–ª –≤ Telegram API
@app.route('/webhook', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return 'ok', 200

# –û—Ç–≤–µ—Ç –Ω–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "–°–∞–ª–µ–º! –Ø –ë–∞—É—ã—Ä–∂–∞–Ω –∏–∑ White Home. –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–ª—å–∫–æ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –ø–æ—Ç–æ–ª–∫–æ–≤? üòä"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    user_id = message.chat.id
    user_input = message.text.strip()

    if user_id not in chat_history:
        chat_history[user_id] = [{"role": "system", "content": PROMPT_SYSTEM}]
    chat_history[user_id].append({"role": "user", "content": user_input})

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=chat_history[user_id]
        )
        reply = response.choices[0].message.content.strip()
        bot.send_message(user_id, reply)
        chat_history[user_id].append({"role": "assistant", "content": reply})

        # –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Ü–∏—Ñ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
        if any(c.isdigit() for c in user_input) and len(user_input) >= 9:
            bot.send_message(ADMIN_ID, f"üÜï –ö–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª: {user_input}")

    except Exception as e:
        bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞ —É –∫–ª–∏–µ–Ω—Ç–∞ {user_id}: {e}")

# –ó–∞–ø—É—Å–∫ (–ª–æ–∫–∞–ª—å–Ω–æ –Ω–µ –Ω—É–∂–µ–Ω, –Ω–∞ Render ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è gunicorn-–æ–º)
if __name__ == "__main__":
    app.run()
