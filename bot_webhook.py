import os
import telebot
import openai
from flask import Flask, request

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_ID = os.getenv("ADMIN_ID")

bot = telebot.TeleBot(TELEGRAM_TOKEN)
openai.api_key = OPENAI_API_KEY
chat_history = {}

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

PROMPT_SYSTEM = """
–¢—ã ‚Äî AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç White Home –≤ –ê—Å—Ç–∞–Ω–µ. –¢–≤–æ—ë –∏–º—è ‚Äî –ë–∞—É—ã—Ä–∂–∞–Ω. –¢—ã –≤—Å–µ–≥–¥–∞ –≤–µ–¥—ë—à—å —Å–µ–±—è –≤–µ–∂–ª–∏–≤–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ –∏ –≥–æ–≤–æ—Ä–∏—à—å –Ω–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—ã –∑–∞–¥–∞—ë—à—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ–≥–∞–µ—à—å –∫–ª–∏–µ–Ω—Ç—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞—Ç—è–∂–Ω—ã—Ö –ø–æ—Ç–æ–ª–∫–æ–≤ —Å —É—á—ë—Ç–æ–º:
‚Äî –∫–≤–∞–¥—Ä–∞—Ç—É—Ä—ã –ø–æ—Ç–æ–ª–∫–∞,
‚Äî —Ç–∏–ø–∞ –ø–æ—Ç–æ–ª–∫–∞ (–≤—Å—Ç–∞–≤–∫–∞, –≥–∞–ª—Ç–µ–ª—å, —Ç–µ–Ω–µ–≤–æ–π, –ø–∞—Ä—è—â–∏–π),
‚Äî –ø–æ–¥—à—Ç–æ—Ä–Ω–∏–∫–æ–≤ (–º–∞—Ç–µ—Ä–∏–∞–ª, –¥–ª–∏–Ω–∞),
‚Äî –æ—Å–≤–µ—â–µ–Ω–∏—è (—Å–æ—Ñ–∏—Ç—ã, –ª—é—Å—Ç—Ä—ã),
‚Äî –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—á–∏—Ç–∞–π: –ø–ª–æ—â–∞–¥—å √ó 1.3),
‚Äî –±–∞–≥–µ—Ç–∞ (–µ—Å–ª–∏ –≤—Å—Ç–∞–≤–∫–∞/–≥–∞–ª—Ç–µ–ª—å, —Å—á–∏—Ç–∞–µ—à—å –ø–æ 500‚Ç∏/–ø.–º.),
‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–µ—Å–ª–∏ —Ä–∞—Å—á—ë—Ç < 50 000‚Ç∏ ‚Äî –ø—Ä–æ–≥–æ–≤–æ—Ä–∏ —ç—Ç–æ –∫–ª–∏–µ–Ω—Ç—É),
–∏ –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤—ã–µ–∑–¥ –∑–∞–º–µ—Ä—â–∏–∫–∞.
"""

@app.route('/')
def index():
    return 'WhiteHome bot —Ä–∞–±–æ—Ç–∞–µ—Ç!'

@app.route(f'/{TELEGRAM_TOKEN}', methods=['POST'])
def webhook():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return 'ok', 200

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–°–∞–ª–µ–º! –Ø –ë–∞—É—ã—Ä–∂–∞–Ω –∏–∑ White Home. –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–ª—å–∫–æ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –ø–æ—Ç–æ–ª–∫–æ–≤? üòä")

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    user_id = message.chat.id
    user_input = message.text

    if user_id not in chat_history:
        chat_history[user_id] = [{"role": "system", "content": PROMPT_SYSTEM}]
    chat_history[user_id].append({"role": "user", "content": user_input})

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=chat_history[user_id]
        )
        reply = response.choices[0].message.content
        bot.send_message(user_id, reply)
        chat_history[user_id].append({"role": "assistant", "content": reply})

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if any(c.isdigit() for c in user_input) and len(user_input) >= 9:
            bot.send_message(ADMIN_ID, f"üÜï –ö–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª: {user_input}")

    except Exception as e:
        print(f"[ERROR] {e}")
        bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        if ADMIN_ID:
            bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞ —É –∫–ª–∏–µ–Ω—Ç–∞ {user_id}: {e}")

# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–Ω–∞ Render –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
if __name__ == "__main__":
    app.run()
